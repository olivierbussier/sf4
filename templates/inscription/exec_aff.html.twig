
{#
    static private $fields = [
        [self::PASSAGER => false, self::NORMAL => true,  'aff' => 'affEtud',           'check' => null],
        [self::PASSAGER => true,  self::NORMAL => true,  'aff' => 'affDnaiss',         'check' => 'checkDnaiss'],
        [self::PASSAGER => false, self::NORMAL => true,  'aff' => 'affTel',            'check' => 'checkTel'],
        [self::PASSAGER => true,  self::NORMAL => true,  'aff' => 'affMail',           'check' => 'checkMail'],
        [self::PASSAGER => false, self::NORMAL => true,  'aff' => 'affPhoto',          'check' => 'checkPhoto'],
        // 2
        [self::PASSAGER => true,  self::NORMAL => true,  'aff' => 'affNiv',            'check' => 'checkNiv'],
        [self::PASSAGER => false, self::NORMAL => true,  'aff' => 'affDipl',           'check' => 'checkDipl'],
        [self::PASSAGER => false, self::NORMAL => true,  'aff' => 'affActi',           'check' => 'checkActi'],
        [self::PASSAGER => false, self::NORMAL => true,  'aff' => 'affBene',           'check' => null],
        [self::PASSAGER => true,  self::NORMAL => true,  'aff' => 'affMedic',          'check' => null],
        [self::PASSAGER => false, self::NORMAL => true,  'aff' => 'affAcci',           'check' => 'checkAcci'],
        [self::PASSAGER => false, self::NORMAL => true,  'aff' => 'affAspi',           'check' => 'checkAspi'],
        [self::PASSAGER => true,  self::NORMAL => true,  'aff' => 'affDcertif',        'check' => 'checkDcertif'],
        [self::PASSAGER => false, self::NORMAL => true,  'aff' => 'affLic',            'check' => 'checkLic'],
        [self::PASSAGER => true,  self::NORMAL => true,  'aff' => 'affAss',            'check' => 'checkAss'],
        [self::PASSAGER => false, self::NORMAL => true,  'aff' => 'affReducfam',       'check' => 'checkReducfam'],
        [self::PASSAGER => false, self::NORMAL => true,  'aff' => 'affFact',           'check' => null],
        [self::PASSAGER => false, self::NORMAL => true,  'aff' => 'affPret',           'check' => 'checkPret'],
        [self::PASSAGER => false, self::NORMAL => true,  'aff' => 'affBadge',          'check' => null],
        [self::PASSAGER => true,  self::NORMAL => true,  'aff' => 'affInfoperso',      'check' => null],
        [self::PASSAGER => true,  self::NORMAL => true,  'aff' => 'affMailliste',      'check' => 'checkMailliste'],
        [self::PASSAGER => false, self::NORMAL => true,  'aff' => 'affReglement',      'check' => 'checkReglement'],
        [self::PASSAGER => false, self::NORMAL => true,  'aff' => 'affMineur',         'check' => 'checkMineur'],
        [self::PASSAGER => true,  self::NORMAL => true,  'aff' => 'affCalcul',         'check' => null],
        [self::PASSAGER => true,  self::NORMAL => true,  'aff' => 'affConfirm',        'check' => null]
    ];
#}
    {% if mode is 'NORMAL' %}

        <div class="col-xs-12">
            <h3>Inscription GUC Plongée - Saison <?php echo Config::$p_annee . "-" . (Config::$p_annee + 1); ?>.</h3>
        </div>

        <div class="col-xs-12">
            <h4>Instructions</h4>
        </div>

        <div class="col-xs-12">
            <p>Avec ce formulaire, vous allez effectuer votre pré-inscription. A l'issue, vous recevrez un mail
                confirmant
                sa prise en compte, avec en attachement votre fiche d'inscription PDF préremplie que vous
                n'aurez plus qu'à imprimer et signer.</p>
            <p>Vous devrez ensuite vous présenter à une des séances d'inscription indiquées au bas de votre fiche,
                en emportant avec vous tous les documents demandés.</p>
            <p>Lorsque le club aura récupéré et validé la totalité de ces documents, votre inscription sera
                définitivement validée et vous recevrez un second mail pour vous le signifier. Si vous avez demandé
                une facture, celle-ci vous parviendra à ce moment là.</p>
            <p>Avant leur inscription définitive, les enfants de 10 à 14 ans auront un entretien avec un
                membre de la section enfants.</p>
            <p>Si vous rencontrez des difficultés, n'hésitez pas à nous les remonter au moyen de la rubrique
                <a href="{{ url(contact) }}" target="ifr">Contact</a>,
                ou en envoyant un mail au <a href="mailto:webmaster@guc-plongee.net">Webmaster</a></p>

            <p><strong>Attention:</strong></p>
            <ul>
                <li>La remise du dossier complet est un pré-requis a la validation de l'inscription
                    et donc à l'accès au bassin.
                </li>
                <li>Le remboursement des activités ne pourra être réalisé qu'exceptionellement et au cas par cas</li>
                <li>Après le 30 Novembre, pour les personnes n'ayant pas validé leur inscription,
                    le prix de la cotisation sera majoré de <?= Config::MAJO_COTISATION; ?>€.
                </li>
            </ul>
        </div>

    {% endif %}

    {% if mode is 'PASSAGER' %}

        <div class="col-xs-12">
            <h3>Inscription GUC Plongée (Licence Passager) -
                Saison {{ conf.p_annee }} - {{ conf.p_annee + 1 }}.</h3>
        </div>

        <div class="col-xs-12">
            <h4>Instructions</h4>
        </div>

        <div class="col-xs-12">
            <p>Avec ce formulaire, vous allez effectuer votre demande de licence passager. A l'issue,
                vous recevrez un mail confirmant sa prise en compte.</p>
            <p>Si vous rencontrez des difficultés, n'hésitez pas à nous les remonter au moyen de la rubrique
                <a href="{{ url(contact) }}">Contact</a>. Ou en envoyant un mail au
                <a href="mailto:webmaster@guc-plongee.net">Webmaster</a></p>
        </div>
    {% endif %}

    {% if mode is 'NORMAL' or mode is 'PASSAGER' %}

        <div class="col-xs-12">
            <h3>1 - Informations personnelles de {{ user.nom }} {{ user.prenom }}</h3>
        </div>

        <div class="col-xs-12">
            <h4>Genre</h4>
        </div>

        {{ control.error(1,1) }}

        <div class="col-xs-12 col-sm-6">
            {{ form }}<?php Controls::inoption(
                "GENRE",
                ["-" => '', "Monsieur" => "Mr.", "Madame" => "Mme.", "Mademoiselle" => "Mlle."],
                Form::get('GENRE')
            );
            ?>
        </div>
    {% endif %}

    {% if mode is 'NORMAL' or mode is 'PASSAGER' %}

        <div class="col-xs-12">
            <h4>Coordonnées</h4>
        </div>

        <?php $e->afficheErrors(1, 2); ?>

        <div class="col-xs-12 col-sm-6">
            <?php Controls::intext("Adresse : ", 'ADD1', Form::get('ADD1'), "Votre adresse"); ?>
        </div>

        <div class="col-xs-12 col-sm-6">
            <?php Controls::intext("Suite adresse : ", 'ADD2', Form::get('ADD2'), "Votre adresse (suite)"); ?>
        </div>

        <div class="col-xs-12 col-sm-6">
            <?php Controls::intext("Code postal : ", 'CODEP', Form::get('CODEP'), "5 Chiffres"); ?>
        </div>

        <div class="col-xs-12 col-sm-6">
            <?php Controls::intext("Ville : ", "VILLE", Form::get('VILLE'), "Votre Ville"); ?>
        </div>

    {% endif %}

    {% if mode is 'NORMAL' %}

        <div class="col-xs-12 col-sm-6">
            <?php $e->afficheErrors(1, 3); ?>
            <?php Controls::intext("Profession : ", "PROFESSION", Form::get('PROFESSION'), "Etudiant"); ?>
        </div>
    {% endif %}

    {% if mode is 'NORMAL' %}

    <div class="col-xs-12 col-sm-6">
            <?php Controls::incheckbox(
                "Cochez cette case si vous êtes étudiant",
                "ETUDIANT",
                Form::get('ETUDIANT') == 'OUI',
                self::$oc
            ); ?>
        </div>
        <?php
    }

    {% endif %}

    {% if mode is 'NORMAL' or mode is 'PASSAGER' %}

        <div class="col-xs-12 col-sm-6">
            {{ control.error(1,4) }}

        Controls::indate(
                "Date de naissance : ",
                "DATENAISS",
                Form::get('DATENAISS'),
                self::$oc
            ); ?>
        </div>

    {% endif %}

    {% if mode is 'NORMAL' or mode is 'PASSAGER' %}

    private static function affTel(Error $e)
    {
        ?>
        <div class="col-xs-12 col-sm-6">
            <?php $e->afficheErrors(1, 5); ?>
            <?php Controls::intext("Téléphone fixe : ", "TELFIX", Form::get('TELFIX'), "01 02 03 04 05"); ?>
        </div>
        <div class="col-xs-12 col-sm-6">
            <?php $e->afficheErrors(1, 6); ?>
            <?php Controls::intext("Téléphone portable : ", "TELPORT", Form::get('TELPORT'), "06 02 03 04 05"); ?>
        </div>
        <?php
    }

    /**
     * Helper de vérification des numéros de téléphone
     * @param $str
     * @return bool|null|string|string[]
     */
    private static function verifTel($str)
    {
        $tel = false;
        // Suppression des caractères spéciaux
        $res = str_replace(array('.', ' ', ',', '-', '/'), '', $str);
        // Que des chiffres ?
        if (!ctype_digit($res) && substr($res, 0, 3) == "+33") {
            if (ctype_digit(substr($res, 1)) && strlen($res) == 12) {
                $tel = preg_replace(
                    "#(\+)(\d{2})(\d{1})(\d{2})(\d{2})(\d{2})(\d{2})#",
                    "0$3 $4 $5 $6 $7",
                    $res
                );
            }
        } else {
            if ($res[0] == '0' && strlen($res) == 10) {
                $tel = preg_replace(
                    "#(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})#",
                    "$1 $2 $3 $4 $5",
                    $res
                );
            }
        }
        return $tel;
    }

    /**
     * Vérification des numéros de téléphone
     * @param Error $e
     */
    private static function checkTel(Error $e)
    {
        $tel = Form::get('TELFIX');

        if ($tel != '') {
            if (($res = self::verifTel($tel)) == false) {
                $e->error(1, 5, "Votre téléphone (fixe) est incorrect.");
            } else {
                Form::set('TELFIX', $res);
            }
        }

        $tel = Form::get('TELPORT');
        if ($tel != '') {
            if (($res = self::verifTel($tel)) == false) {
                $e->error(1, 6, "Votre téléphone (portable) est incorrect.");
            } else {
                Form::set('TELPORT', $res);
            }
        }

        if ((Form::get('TELFIX') == "") && (Form::get('TELPORT') == "")) {
            $e->error(1, 5, "Au moins un téléphone doit être renseigné.");
        }
    }

    /**
     * Affichage du champ de saisie d'adresse mail
     * @param Error $e
     */
    private static function affMail(Error $e)
    {
        ?>
        <div class="col-xs-12 col-sm-6">
            <?php $e->afficheErrors(1, 7); ?>
            <?php Controls::intext("Adresse mail : ", "MAIL", Form::get('MAIL'), "alain.martin@laposte.net"); ?>
        </div>
        <?php
    }

    /**
     * Vérification de l'adresse mail
     * @param Error $e
     */
    private static function checkMail(Error $e)
    {
        if (Form::get('MAIL') != "") {
            $Syntaxe = '#^[\w.-]+@[\w.-]+\.[a-zA-Z]{2,5}$#';
            if (!preg_match($Syntaxe, Form::get('MAIL'))) {
                $e->error(1, 7, "Votre email semble incorrecte.");
            }
        }
    }

    /**
     * Affichage du widget de gestion photo
     * @param Error $e
     * @uses callback_error_server
     */
    private static function affPhoto(Error $e)
    {
        $NOM    = Session::get('NOM');
        $PRENOM = Session::get('PRENOM');
        $REFUSR = Session::get('REFUSR');
        $REFTMP = Session::get('REFTMP');

        // Recherche d'une photo d'identité existante
        // -----------------------------------------

        if ($REFUSR == 0) {
            $REFPHOTO = 'tmp' . $REFTMP;
        } else {
            $REFPHOTO = $REFUSR;
        }

        $filename = PhotoHelpers::initPathPhoto($NOM, $PRENOM, $REFPHOTO, PhotoHelpers::ORIGINAL);
        $filethum = PhotoHelpers::initPathPhoto($NOM, $PRENOM, $REFPHOTO, PhotoHelpers::THUMBNAIL);
        $fileoper = PhotoHelpers::initPathPhoto($NOM, $PRENOM, $REFPHOTO, PhotoHelpers::OPERATIONS);

        // Pour l'image, les case suivants doivent être gérés:
        //  - Image inexistante
        //  - Image illisible (erreur "getimagesize")
        //  - Image trop grande, ou ratio incorrect
        //  - Image OK
        // ---------------------------------------------------

        $fOrig = false; //file_exists($filename);
        $fThum = file_exists($filethum);
        $fOper = false; //file_exists($fileoper);

        $fGood = self::NONE;

        if ($fOrig && $fThum) {
            $fGood = self::ALLGOOD;
        } elseif ($fOrig && !$fThum) {
            $fGood = self::ONLYORIG;
        } elseif (!$fOrig && $fThum) {
            $fGood = self::ONLYTHUMB;
        }

        if ($fGood == self::ALLGOOD && $fOper) {
            $opers = file($fileoper);

            $transfo = array();

            foreach ($opers as $v) {
                $tt = explode(':', $v);
                switch ($tt[0]) {
                    case 'rotation':
                        $transfo['r'] = intval($tt[1]);
                        break;
                    case 'crop_x':
                        $transfo['x'] = intval($tt[1]);
                        break;
                    case 'crop_y':
                        $transfo['y'] = intval($tt[1]);
                        break;
                    case 'crop_width':
                        $transfo['w'] = intval($tt[1]);
                        break;
                    case 'crop_height':
                        $transfo['h'] = intval($tt[1]);
                        break;
                    default:
                        break;
                }
            }
            $texte = "<p>La photo ci-contre à droite sera utilisée dans votre dossier et dans le " .
                "trombinoscope du club</p>Vous pouvez :<ul><li>La recadrer et/ou la faire pivoter " .
                "en cliquant sur le stylo dans l'image</li><li>En changer en cliquant sur la photo ou en " .
                "faisant un 'glisser-déposer d'une nouvelle photo</li></ul></p><p>Si vous ne pouvez pas " .
                "scanner et/ou télécharger une photo, joignez en une au format papier " .
                "<strong>(avec votre nom au dos)</strong> dans le dossier d'inscription afin que le " .
                "secrétariat fasse le scan pour vous.</p>";
            $image = $filename . "?id=" . rand();
        }

        if (($fGood == self::ALLGOOD && !$fOper) || $fGood == self::ONLYORIG) {
            $texte = "<p>La photo ci-contre à droite à été trouvée mais doit être recadrée pour être utilisable.</p>" .
                "<p>Vous pouvez :<ul><li>La recadrer et/ou la faire pivoter en cliquant sur le stylo dans l'image</li>".
                "<li>En changer en cliquant sur la photo ou en faisant un 'glisser-déposer d'une ".
                "nouvelle photo</li></ul>" .
                "</p><p>Si vous ne pouvez pas scanner et/ou télécharger une photo, joignez en une au format papier " .
                "<strong>(avec votre nom au dos)</strong> dans le dossier d'inscription afin que le secrétariat " .
                "fasse le scan pour vous.</p>";
            $image = $filename . "?id=" . rand();
        }
        if ($fGood == self::ONLYTHUMB) {
            $texte = "<p>La photo ci-contre à droite sera utilisée dans votre dossier et dans le ".
                "trombinoscope du club</p>" .
                "<p>Vous pouvez :</p><ul><li>La recadrer et/ou la faire pivoter en cliquant sur le stylo dans " .
                "l'image</li><li>En changer en cliquant sur la photo ou en faisant un 'glisser-déposer d'une " .
                "nouvelle photo</li></ul></p><p>Si vous ne pouvez pas scanner et/ou télécharger une photo, joignez " .
                "en une au format papier <strong>(avec votre nom au dos)</strong> dans le dossier d'inscription " .
                "afin que le secrétariat fasse le scan pour vous.</p>";
            $image = $filethum . "?id=" . rand();
        }
        if ($fGood == self::NONE) {
            $texte = "<p>Nous n'avons pas trouvé de photo d'identité de vous dans notre base d'adhérents.</p>" .
                "<p>Vous devez donc télécharger une photo. Pour ce faire, cliquez dans la zone grise ci-contre, " .
                "vous pourrez alors choisir une photo sur votre ordinateur, la cadrer et/ou la faire pivoter puis " .
                "l'enregistrer</p><p>Une fois sauvegardée, cette photo sera utilisée pour votre dossier " .
                "d'inscription; elle sera aussi utilisée pour le trombinoscope du club que vous trouverez dans " .
                "l'intranet.</p><p>Si vous ne pouvez pas scanner et/ou télécharger une photo, joignez en une au " .
                "format papier <strong>(avec votre nom au dos)</strong> dans le dossier d'inscription afin que " .
                "le secrétariat fasse le scan pour vous.</p><p><strong>Sans photo exploitable, tout dossier " .
                "d’inscription sera rejeté.</strong></p>";
            $image = "";
        }
        ?>

        <div class="col-xs-12">
            <h3>2 - Photo d'identité.</h3>
            <?php $e->afficheErrors(2, 1); ?>
        </div>

        <div class="col-xs-12 col-sm-8">
            <div id="textimg"><?= $texte; ?></div>
        </div>

        <div class="col-xs-12 col-sm-4">
            <div class="slim"
                 data-post="output"
                 data-service="ajax_slim_async.php"
                 data-push="true"
                 data-save-initial-image="false"
                 data-did-confirm="callback_after_save"
                 data-did-receive-server-error="callback_error_server"
                 data-instant-edit="true"
                 data-size="480,620"
                 data-force-size="240,310"
                 data-force-type="jpg"
                 data-jpeg-compression="95"
                 data-ratio="24:31"
                 data-min-size="48,62"
                 data-max-file-size="8"
                 data-status-file-size="Taille Max = 8Mo"
                 data-meta-nom="<?= $NOM; ?>"
                 data-meta-prenom="<?= $PRENOM; ?>"
                 data-meta-refusr="<?= $REFPHOTO; ?>"
                 data-button-remove-label="false"
                 data-label="Clickez ici pour choisir une photo<br><br>ou bien<br><br>déposer ici une photo">
                <input type="file" name="slim[]"/>
                <?php
                if ($image != "") { ?>
                    <img src="<?= $image; ?>">
                    <?php
                } ?>
            </div>
            <script>
                function callback_error_server(error, defaultError) {
                    document.getElementById("textimg").innerHTML = '<span class="redw">fsdfsd</span>';
                    console.log(error);
                    console.log(defaultError);
                }

                function callback_after_save(data) {
                    texte = "<p>La photo ci-contre à droite sera utilisée dans votre dossier et dans le " +
                        "trombinoscope du club</p>Vous pouvez :<ul><li>La recadrer et/ou la faire pivoter " +
                        "en cliquant sur le stylo dans l'image</li><li>En changer en cliquant sur la photo ou " +
                        "en faisant un 'glisser-déposer d'une nouvelle photo</li></ul></p><p>Si vous ne pouvez " +
                        "pas scanner et/ou télécharger une photo, joignez en une au format papier " +
                        "<strong>(avec votre nom au dos)</strong> dans le dossier d'inscription afin que le " +
                        "secrétariat fasse le scan pour vous.</p>";
                    document.getElementById("textimg").innerHTML = texte;
                }
            </script>

        </div>
        <?php
    }

    /**
     * Vérification photo
     * @param Error $e
     */
    private static function checkPhoto(Error $e)
    {
        $NOM    = Session::get('NOM');
        $PRENOM = Session::get('PRENOM');
        $REFUSR = Session::get('REFUSR');
        $REFTMP = Session::get('REFTMP');

        //Globals::set('PHOTO','OK');

        if ($REFUSR == 0) {
            $REFPHOTO = 'tmp' . $REFTMP;
        } else {
            $REFPHOTO = $REFUSR;
        }

        $path = PhotoHelpers::initPathPhoto($NOM, $PRENOM, $REFPHOTO, PhotoHelpers::THUMBNAIL);

        // Vérification de l'existence de l'image

        if (!file_exists($path)) {
            $e->error(2, 1, "Votre photo d'identité est manquante.", false);
            Globals::set('PHOTO', 'NOTFOUND');
        } else {
            // Vérification du ratio et de la taille
            $sz = getimagesize($path);
            if ($sz == false) {
                $e->error(2, 1, "Votre photo d'identité n'a pas pu être lue.", false);
                Globals::set('PHOTO', 'ERREURLECTURE');
            } else {
                $w = $sz[0]; //Largeur
                $h = $sz[1]; //Largeur
                $ratio = $h / $w;
                if ($ratio > 1.30 || $ratio < 1.28 || $w > 260 || $w < 220) {
                    $e->error(1, 8, "Votre photo d'identité n'a pas les bonnes dimensions, " .
                        "Servez vous de l'outil en début de page pour la recouper.");
                }
            }
        }
    }

    /**
     * Affichage des champs de saisie de niveau
     * @param Error $e
     */
    private static function affNiv(Error $e)
    {
        ?>
        <div class="col-xs-12">
            <h3>3 - Niveaux de plongée</h3>
            <p>Renseignez vos niveaux de scaphandre et d'apnée. Indiquez "Débutant" si vous n'avez jamais pratiqué.
                Une copie du ou des diplômes est exigée en début d’année pour les nouveaux adhérents.</p>
        </div>

        <div class="col-xs-12 col-sm-6">
            <h4>Plongée scaphandre</h4>
            <?php $e->afficheErrors(3, 1);

            Controls::inoption(
                'NIVEAU',
                ListesForm::$niveauxSca,
                Form::get('NIVEAU'),
                self::$oc
            ); ?>
        </div>

        <div class="col-xs-12 col-sm-6">
            <h4>Apnée</h4>
            <?php $e->afficheErrors(3, 2);

            Controls::inoption(
                'APNEE',
                ListesForm::$niveauxApn,
                Form::get('APNEE'),
                self::$oc
            ); ?>
        </div>
        <?php
    }

    /**
     * Vérification de la saisie des niveaux
     * @param Error $e
     */
    private static function checkNiv(Error $e)
    {
        $Niveau = Form::get('NIVEAU');
        $Apnee = Form::get('APNEE');
        $dnaiss = Form::get('DATENAISS');

        $age_finannee = GucDate::age($dnaiss, "31/12/" . Config::$p_annee);

        if ($Niveau == "") {
            $e->error(3, 1, "Vous n'avez pas renseigné votre niveau actuel de plongée scaphandre.");
        } else {
            if ($age_finannee < 13 && $Niveau != "Enfant") {
                $e->error(3, 1, "Agé de " . $age_finannee . " ans au 31/12/" . Config::$p_annee .
                    " et à moins de 14 ans, vous devez cocher enfant.");
            }

            if ($age_finannee >= 14 && $Niveau == "Enfant") {
                $e->error(3, 1, "Agé de " . $age_finannee . " ans au 01/01/" . (Config::$p_annee + 1) .
                    " et à partir de 14 ans, vous n'êtes plus considéré comme un enfant pour la FFESSM.");
            }
        }

        if ($Apnee == "") {
            $e->error(3, 2, "Vous n'avez pas renseigné votre niveau actuel d'apnée.");
        }
    }

    private static function rechercheDoc($type)
    {
        $nom    = Session::get('NOM');
        $prenom = Session::get('PRENOM');
        $id     = Session::getRefUser();

        $certifName = $nom . '-' . $prenom . '-' . $id . '-' . $type . '-';
        PhotoHelpers::corrigerPath($certifName);
        $tab =  glob($type . '/' . $certifName . '*.*');
        $res = [];
        foreach ($tab as $v) {
            $m = mime_content_type($v);
            switch ($m) {
                case 'image/jpeg':
                case 'image/png':
                case 'image/gif':
                    $p['type'] = 'image'; break;
                case 'application/pdf':
                    $p['type'] = 'pdf'; break;
            }
            $p['name'] = $v;
            $res[] = $p;
        }
        $c = count($tab);
        return $res;
    }

    /**
     * Affichage des champs de saisie des diplômes
     * @param Error $e
     */
    private static function affDipl(Error $e)
    {
        ?>
        <div class="col-xs-12">
            <h3>4 - Autres diplômes</h3>
            <p>Renseignez ici vos dipômes et qualifications, pensez à amener une photocopie le jour de l'inscription</p>
        </div>

        <div class="col-xs-12">
            <h4>Secourisme/Médecins</h4>
            <?php $e->afficheErrors(4, 1);
            $fDip = new Diplomes();
            $fDip->initFromVal(Form::get('DIPLOMES')); ?>
        </div>
        <?php
            $n = 3;
            $idx = 0;
            $v = count(ListesForm::$diplomesForm);
            $nbcols = (int)($v / $n);
            $mod =  ($v % $n != 0) ? 1 : 0;
            $nbcols += $mod;
            $cols = 12 / $nbcols;
            $foot = 0;
            foreach (ListesForm::$diplomesForm as $k => $v) {
                if ($idx % 3 == 0) { ?>
                    <div class="col-xs-12 col-sm-<?= $cols ?>">
                <?php
                }
                Controls::incheckbox($k, $v, $fDip->get($v) == 'OUI');
                $mod = $idx % 3;
                if ($mod == 2) { ?>
                    </div>
                <?php
                }
                $idx++;
            }
            if ($mod <= $n-1) { ?>
                </div>
                <?php
            }?>

        <div class="col-xs-12">
            <h4>Chargement de la copie de vos diplomes</h4>
            <p>Utilisez le bouton ci-dessous pour charger une copie de vos diplomes.
                Depuis votre téléphone, vous pourrez en prendre directement une photo</p>
            <input id="input-b0" name="input-b0[]" type="file" multiple>
        </div>

        <script>
            //initialPreviewShowDelete: true,
            $(document).ready(function () {
                $("#input-b0").fileinput({
                    language: 'fr',
                    uploadUrl: "ajax_upload.php",
                    maxFileSize: 9000,
                    overwriteInitial: false,
                    uploadExtraData: {nbFiles: 4, Type: 'diplomes'},
                    deleteExtraData: {nbFiles: 4, Type: 'diplomes'},

                    maxFileSize: 9000,
                    maxImageWidth: 1100,
                    maxImageHeight: 2000,
                    resizePreference: 'height',
                    resizeImage: true,
                    resizeIfSizeMoreThan: 1000,
                    maxFileCount:4,
                    //autoReplace: true,
                    fileActionSettings: {
                        showUpload: false,
                        showDownload: false
                    },
                    showUpload: false, // hide upload button
                    allowedFileExtensions: ['jpg','jpeg','png','gif','pdf']
                    <?php
                    $tab = self::rechercheDoc('diplomes');
                if (count($tab) > 0) {
                    ?>,
                    initialPreview: [
<?php
                    $virg = '';
                foreach ($tab as $v) {
?><?= $virg ?>                      '<?= $v['name'] ?>'<?php
                    $virg = ",\n";
                }
                ?>
                    ],
                    append: true,
                    validateInitialCount: true,
                    initialPreviewAsData: true,
                    deleteUrl: "ajax_delete.php",
                    initialPreviewConfig: [
<?php
                            $virg = '';
                foreach ($tab as $v) {
                ?><?= $virg ?>
                        {
                            type: '<?= $v["type"] ?>',
                            caption: '<?= $v['name'] ?>',
                            width: '120px',
                            downloadUrl: '<?= $v['name'] ?>',
                            key: '<?= $v['name'] ?>',
                        }<?php
                    $virg = ",";
                } ?>
                            ]
                            <?php
                    }
                    ?>
                })
            })
        </script>
<?php
    }

    /**
     * Vérification des champs de saisie des diplômes
     * @param Error $e
     */
    private static function checkDipl(Error $e)
    {
        $dnaiss = Form::get('DATENAISS');
        $age_today = GucDate::age($dnaiss);
        $Niveau = Form::get('NIVEAU');

        $fDip = new Diplomes();
        $fDip->initFromVal(Form::get('DIPLOMES'));

        if ($fDip->get('TIV') == "OUI") {
            if ($age_today < 18) {
                $e->error(4, 1, "Vous avez " . $age_today .
                    " ans et TIV implique que vous êtes majeur, vérifiez votre date de naissance.");
            }

            if ($Niveau == "Débutant" || $Niveau == "N1" || $Niveau == "Enfant") {
                $e->error(4, 1, "TIV implique que vous êtes au moins Niveau 2.");
            }
        }
    }

    /**
     * Helper pour la vérif de champs dans les radio boutons 'inradio'
     * @param $field
     * @param $key
     * @param $value
     * @return bool
     */

    public static function cActivite($field, $key, $value): bool
    {
        if ($value == Form::get($field)) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Affichage des champs de saisie d'activité
     * @param Error $e
     * @uses cActivite
     */
    private static function affActi(Error $e)
    {
        ?>
        <div class="col-xs-12">
            <h3>5 - Activité prévue cette année</h3>
            <p>Renseignez ici l'activité que vous souhaitez pour cette année</p>
        </div>

        <div class="col-xs-12 col-sm-6">
            <?php $e->afficheErrors(5, 1); ?>
            <h4>Sections Scaphandre</h4>
            <?php

            Controls::inradio(
                'ACTIVITE',
                ListesForm::$activitesSca,
                'App\Inscription\ExecAffCheck::cActivite',
                self::$oc
            ); ?>
        </div>

        <div class="col-xs-12 col-sm-6">
            <h4>Ou Apnée</h4>
            <?php $e->afficheErrors(5, 2); ?>
            <?php
            Controls::inradio(
                'ACTIVITE',
                ListesForm::$activitesApn,
                'App\Inscription\ExecAffCheck::cActivite',
                self::$oc
            );

            Controls::incheckbox(
                "Si vous avez suivi une formation de plongeur scaphandre au GUC, cochez cette case",
                "APNEESCA",
                Form::get('APNEESCA') == 'OUI',
                self::$oc
            );
            ?>
        </div>

        <div class="col-xs-12 col-sm-6">
            <h4>Ou autres</h4>
            <?php $e->afficheErrors(5, 3); ?>
            <?php

            Controls::inradio(
                'ACTIVITE',
                ListesForm::$activitesDiv,
                'App\Inscription\ExecAffCheck::cActivite',
                self::$oc
            );
            ?>
        </div>
        <?php
    }

    /**
     * Vérification des champs de saisie d'activité
     * @param Error $e
     */
    private static function checkActi(Error $e)
    {
        $Niveau   = Form::get('NIVEAU');
        $Apnee    = Form::get('APNEE');
        $Activite = Form::get('ACTIVITE');
        $dnaiss   = Form::get('DATENAISS');

        $age_today    = GucDate::age($dnaiss);
        $age_finannee = GucDate::age($dnaiss, "31/12/" . Config::$p_annee);

        if ($Activite == "") {
            $e->error(5, 1, "Vous n'avez pas renseigné votre activité pour cette année.");
        }

        if (($Activite == ListesForm::A_ENFANTS) && ($Niveau != ListesForm::N_ENFANT)) {
            $e->error(5, 1, "Votre activité est incompatible avec votre niveau de plongée.");
        }

        if ($age_finannee >= 14 && $Activite == ListesForm::A_ENFANTS) {
            $e->error(5, 1, "Vous êtes trop âgé  (" . $age_today . " ans) pour la section enfants.");
        }

        if (($Activite == ListesForm::A_PN1) &&
            ($Niveau != ListesForm::N_ENFANT) &&
            ($Niveau != ListesForm::N_DEBUT) &&
            ($Niveau != ListesForm::N_OWD)) {
            $e->error(5, 1, "Votre activité est incompatible avec votre niveau de plongée.");
        }

        if (($Activite == ListesForm::A_PN2) &&
            ($Niveau != ListesForm::N_N1) &&
            ($Niveau != ListesForm::N_OWD) &&
            ($Niveau != ListesForm::N_AOWD)) {
            $e->error(5, 1, "Votre activité est incompatible avec votre niveau de plongée.");
        }

        if (($Activite == ListesForm::A_PN3) &&
            ($Niveau != ListesForm::N_N2) &&
            ($Niveau != ListesForm::N_N2I) &&
            ($Niveau != ListesForm::N_RDMD)) {
            $e->error(5, 1, "Votre activité est incompatible avec votre niveau de plongée.");
        }

        if ($Activite == ListesForm::A_PN4) {
            if (($Niveau != ListesForm::N_N3) &&
                ($Niveau != ListesForm::N_N3I)) {
                $e->error(5, 1, "Votre activité est incompatible avec votre niveau de plongée.");
            }
        }

        if ($Activite == ListesForm::A_PINITIATEUR) {
            if (($Niveau != ListesForm::N_N2) &&
                ($Niveau != ListesForm::N_N3) &&
                ($Niveau != ListesForm::N_N4)) {
                $e->error(5, 1, "Votre activité est incompatible avec votre niveau de plongée.");
            }
        }

        if ($Activite == ListesForm::A_PMF1) {
            if (($Niveau != ListesForm::N_N4) &&
                ($Niveau != ListesForm::N_N4I)) {
                $e->error(5, 1, "Votre activité est incompatible avec votre niveau de plongée.");
            }
        }

        if ($Activite == ListesForm::A_ENCADREMENT) {
            if (($Niveau != ListesForm::N_N2I)  && ($Niveau != ListesForm::N_N3I) &&
                ($Niveau != ListesForm::N_N4)   && ($Niveau != ListesForm::N_N4I) &&
                ($Niveau != ListesForm::N_MF1)  && ($Niveau != ListesForm::N_MF2) &&
                ($Apnee  != ListesForm::N_A2I)  && ($Apnee  != ListesForm::N_A3I) &&
                ($Apnee  != ListesForm::N_A4)   && ($Apnee  != ListesForm::N_A4I) &&
                ($Apnee  != ListesForm::N_MEF1) && ($Apnee  != ListesForm::N_MEF2)) {
                $e->error(5, 1, "Pour encadrer, vous devez avoir un diplôme d'encadrant.");
            }
        }

        // Calcul Cotisation

        $cal = new Calculate();
        $ret = $cal->calcCotis($_POST);

        if ($ret['fErr']) {
            $e->error(5, 1, "Erreur, calcul cotisation impossible, revérifiez votre saisie (1)");
        } else {
            Globals::set('COTISATION', $ret);
        }

        if (Globals::get('COTISATION') == ListesForm::COT_ENFANTS && $age_finannee >= 25) {
            $e->error(5, 1, "Vous devez être agé de moins de 18 ans ou " .
                "être étudiant de moins de 25 ans pour prendre cette cotisation.");
        }

        if (Form::get('COTISATION') == ListesForm::COT_ENFANTS && $age_finannee >= 18 && !Form::get('ETUDIANT')) {
            $e->error(5, 1, "Vous devez être agé de moins de 18 ans ou " .
                "être étudiant de moins de 25 ans pour prendre cette cotisation.");
        }
    }

    /**
     * Affichage du champ de saisie bénévole (ne sert plus a grand chose aujourd'hui)
     */
    private static function affBene(/*Error $e*/)
    {
        ?>
        <div class="col-xs-12">
            <h4>Je participe à la vie du club</h4>
            <p>Le club n'existe que parce que quelques-uns de ses adhérents s'impliquent pour organiser l'activité :</p>
            <ul>
                <li>La gestion du matériel</li>
                <li>La gestion avant les séances (gonflage et retours de matériel)</li>
                <li>La gestion pendant les séances (si vous avez un niveau d'encadrement)</li>
                <li>La gestion après les séances (sorties matériel, fermeture bassin)</li>
                <li>Et tout au long de l'année (communication, organisation sorties, ...)</li>
                <li>Bien d'autres encore ...</li>
            </ul>

            <p>La démarche est encouragée par le club qui propose une cotisation réduite à ceux qui donnent
                de leur temps. Toutefois ceci n'est possible que si des postes sont disponibles et rarement
                compatible avec la préparation d'un niveau de plongée ou d'apnée.</p>
            <p>Si vous êtes intéressé, venez un mardi soir pour rencontrer le président (Patrick) ou l'un des
                responsables du matériel (Olivier ou Philippe) ou du gonflage (Jean-François). Une fois leur accord
                obtenu, le montant de votre cotisation sera ajusté au tarif bénévole.</p>

            <p>La case ci-contre est cochée si le club à validé votre bénévolat
                <input type="checkbox" name="BENEVOLEx" value="OUI"<?php
                if (Form::get('BENEVOLE') == "OUI") {
                    echo " checked";
                }
                ?> disabled></p>
            <?php // Nécessaire parce que les controles "disabled" ne font pas transmis dans le formulaire
            if (Form::get('BENEVOLE') == "OUI") { ?>
                <input type="hidden" name="BENEVOLE" value="OUI">
                <?php
            }
            ?>
        </div>
        <?php
    }

    /**
     * @param Error $e
     */
    private static function affMedic(Error $e)
    { ?>
        <div class="col-xs-12">
            <h3>6 - Informations médicales</h3>
        </div>
    <?php
    }
    /**
     * Afficha des champs de saisie de la personne à prévenir en cas d'accident
     * @param Error $e
     */
    private static function affAcci(Error $e)
    {
        ?>
        <div class="col-xs-12">
            <h4>Personne à prévenir en cas d'accident</h4>
        </div>

        <div class="col-xs-12 col-sm-6">
            <?php $e->afficheErrors(6, 1);
            Controls::intext("Nom : ", 'ACCNOM', Form::get('ACCNOM'), "Nom de la personne à prévenir"); ?>
        </div>

        <div class="col-xs-12 col-sm-6">
            <?php Controls::intext(
                "Prénom : ",
                'ACCPRENOM',
                Form::get('ACCPRENOM'),
                "Prénom de la personne à prévenir"
            ); ?>
        </div>

        <div class="col-xs-12 col-sm-6">
            <?php Controls::intext(
                "Téléphone fixe : ",
                'ACCTELFIX',
                Form::get('ACCTELFIX'),
                "Tel fixe de la personne à prévenir"
            ); ?>
        </div>

        <div class="col-xs-12 col-sm-6">
            <?php Controls::intext(
                "Téléphone portable : ",
                'ACCTELPORT',
                Form::get('ACCTELPORT'),
                "Tel GSM de la personne à prévenir"
            ); ?>
        </div>
        <?php
    }

    /**
     * Vérification des champs de saisie de la personne à prevenir en cas d'accident
     * @param Error $e
     */
    private static function checkAcci(Error $e)
    {
        if (Form::get('ACCNOM') == "") {
            $e->error(6, 1, "Vous n'avez pas renseigné le nom de la personne à prévenir en cas d'accident.");
        }

        if (Form::get('ACCPRENOM') == "") {
            $e->error(6, 1, "Vous n'avez pas enseigné le prénom de la personne à prévenir en cas d'accident.");
        }

        $tel = Form::get('ACCTELFIX');
        if ($tel != '') {
            if (($res = self::verifTel($tel)) == false) {
                $e->error(6, 1, "Le téléphone fixe de la personne à prévenir en cas d'accident est incorrect.");
            } else {
                Form::set('ACCTELFIX', $res);
            }
        }

        $tel = Form::get('ACCTELPORT');
        if ($tel != '') {
            if (($res = self::verifTel($tel)) == false) {
                $e->error(6, 1, "Le téléphone portable de la personne à prévenir en cas d'accident est incorrect.");
            } else {
                Form::set('ACCTELPORT', $res);
            }
        }

        if ((Form::get('ACCTELFIX') == "") && (Form::get('ACCTELPORT') == "")) {
            $e->error(6, 1, "Au moins un téléphone d'une personne à prévenir en cas d'accident doit être renseigné.");
        }
    }

    /**
     * Affichage des champs de saisie de date du certificat médical
     * Ainsi que du téléchargement fichier
     * @param Error $e
     * @return string
     */
    private static function affDcertif(Error $e)
    {
        ?>
        <div class="col-xs-12">
            <h4>Certificat médical.</h4>
        </div>

        <div class="col-xs-12 col-sm-8">
            <?php $e->afficheErrors(6, 2); ?>

            <p>Une copie du certificat médical est exigée pour tout adhérent du GUC. Ce certificat de non-contre
                indication à la pratique de la plongée (ou apnée, ou nage) doit être délivré par un médecin du sport
                ou par un médecin fédéral et doit être postérieur au 1er Juillet <?= Config::$p_annee; ?> afin qu'il
                garde sa validité toute l'année scolaire.</p>
            <p>Cette copie ne sera pas rendue : <strong>Gardez bien l'original</strong> au cas où d'autres copies
                seraient demandées par ailleurs (ex: club du bord de mer).</p>
            <p>Le modèle de certificat préconisé par la FFESSM est téléchargeable
                <a class=mnav2 href="../docs/CertMed.pdf" target=_blank><b><u>ICI</u></b></a></p>
            <p>Pour les enfants de moins de 14 ans non titulaires du N1, ce certificat doit être délivré
                par un médecin fédéral.</p>
            <p>Si vous vous êtes inscrit à un passage de niveau, demandez bien au médecin de cocher l'aptitude
                à la préparation et au passage du brevet suivant, et préciser le niveau.</p>
            <?php
            Controls::indate(
                "Date du certificat : ",
                "DATECERTIF",
                Form::get('DATECERTIF'),
                self::$oc
            );
            ?>
        </div>

        <div class="col-xs-12">
            <h4>Chargement de la copie de votre certificat médical</h4>
            <p>Utilisez le bouton ci-dessous pour charger une copie. Depuis votre téléphone, vous pourrez
                en prendre directement une photo</p>
            <input id="input-b1" name="input-b1[]" type="file" multiple>
        </div>

        <script>
            //initialPreviewShowDelete: true,
            $(document).ready(function () {
                $("#input-b1").fileinput({
                    language: 'fr',
                    uploadUrl: "ajax_upload.php",
                    maxFileSize: 9000,
                    overwriteInitial: false,
                    uploadExtraData: {nbFiles: 1, Type: 'certifs'},
                    deleteExtraData: {nbFiles: 1, Type: 'certifs'},
                    maxFileSize: 9000,
                    maxImageWidth: 1100,
                    maxImageHeight: 2000,
                    resizePreference: 'height',
                    resizeImage: true,
                    resizeIfSizeMoreThan: 1000,
                    maxFileCount:1,
                    autoReplace: true,
                    fileActionSettings: {
                        showUpload: false,
                        showDownload: false
                    },
                    showUpload: false, // hide upload button
                    allowedFileExtensions: ['jpg','jpeg','png','gif','pdf']
                    <?php
                    $tab = self::rechercheDoc('certifs');
                if (count($tab) > 0) {
                    ?>,
                    initialPreview: [
<?php
                    $virg = '';
                foreach ($tab as $v) { 
?><?= $virg ?>                      '<?= $v['name'] ?>'<?php
                    $virg = ",\n";
                }
                ?>
                    ],
                    append: true,
                    validateInitialCount: true,
                    initialPreviewAsData: true,
                    deleteUrl: "ajax_delete.php",
                    initialPreviewConfig: [
<?php
                            $virg = '';
                foreach ($tab as $v) { 
                ?><?= $virg ?>
                        {
                            type: '<?= $v["type"] ?>',
                            caption: '<?= $v['name'] ?>',
                            width: '120px',
                            downloadUrl: '<?= $v['name'] ?>',
                            key: '<?= $v['name'] ?>',
                        }<?php
                    $virg = ",";
                } ?>
                            ]
                            <?php
                    }
                    ?>
                })
            })
        </script>
        <?php
    }


    /**
     * Vérification des champs de saisie du certificat médical
     * @param Error $e
     * @throws \Exception
     */
    private static function checkDcertif(Error $e)
    {
        $dc = Form::get('DATECERTIF');

        if ($dc != "") {
            // verifier date certif

            switch (GucDate::verifDate($dc)) {
                case -1:
                    $e->error(6, 2, "Votre date de certificat est incorrecte (1).");
                    break;
                case -2:
                    $e->error(6, 2, "Votre date de certificat est incorrecte (2).");
                    break;
                case -3:
                case 0:
                    $today = new DateTime();
                    $certif = new DateTime($dc);
                    $expir = $certif->add(new DateInterval('P365D'));
                    $diff = $expir->diff($today);
                    $day = $diff->format('%a');
                    if ($day < 40) {
                        $e->error(6, 2, "Votre certificat médical est trop vieux.");
                    }
                    break;
            }
        } //else
        //Error(5,2,"Vous n'avez pas renseigné la date de certificat médical, ".
        //          "il faudra en amener un le jour de la remise du dossier",false);
    }

    /**
     * Affichage des champs de saisie de l'allergie à l'aspirine
     * @param Error $e
     * @uses cActivite
    */
    private static function affAspi(Error $e)
    {
        ?>
        <div class="col-xs-12">
            <h4>Intolérence à l'aspirine.</h4>
            <?php $e->afficheErrors(6, 3); ?>

            <p>Avez vous une intolérance forte à l'aspirine ? (réactions allant au delà de simples maux d'estomac)</p>

            <?php $vals = array("Oui" => 'OUI', "Non" => 'NON');
            Controls::radio(
                'ALERGASP',
                $vals,
                'App\Inscription\ExecAffCheck::cActivite',
                self::$oc
            ); ?>
        </div>
        <?php
    }

    /**
     * Vérification du champ de saisie de l'allergie à l'aspirine
     * @param Error $e
     */
    private static function checkAspi(Error $e)
    {
        if (Form::get('ALERGASP') == "") {
            $e->error(6, 3, "Vous n'avez pas précisé votre intolérance à l'aspirine.");
        }
    }

    /**
     * Affichage du champ de saisie de la licence FFESSM
     * @param Error $e
     */
    private static function affLic(Error $e)
    {
        ?>
        <div class="col-xs-12">
            <h3>7 - Licence FFESSM</h3>
            <h4>Licence</h4>
            <?php $e->afficheErrors(7, 1); ?>
            <p>Il est obligatoire d'être licencié par la FFESSM pour pratiquer la plongée en club ou la nage
                avec palmes ou l’apnée. La licence tient lieu d'assurance en responsabilité civile. Si vous
                êtes déjà licencié(e) dans un autre club, ne pas demander de licence au GUC.</p>

            <?php Controls::incheckbox(
                "J'ai déjà ma licence FFESSM pour l'année " . Config::$p_annee . "-" . (Config::$p_annee + 1) .
                " (en joindre alors une photocopie)",
                'FLICENCE',
                Form::get('FLICENCE') == 'OUI',
                self::$oc
            ); ?>
        </div>
        <?php
    }

    /**
     * Vérification du champ de saisie licence FFESSM
     * @param Error $e
     */
    private static function checkLic(Error $e)
    {
        // Calcul Licence

        $age_today = GucDate::age(Form::get('DATENAISS'));

        $cotis = new Calculate();
        $licence = $cotis->calcCotis($_POST);

        if ($licence['fErr']) {
            $e->error(7, 1, "Erreur, calcul licence  impossible, revérifiez votre saisie (2)");
        } else {
            Form::set('LICENCE', $licence);
        }

        if (Form::get('LICENCE') == "") {
            $e->error(7, 1, "Vous n'avez pas renseigné le type de licence FFESSM souhaité.");
        }

        if (Form::get('LICENCE') == ListesForm::LIC_ENFANT && $age_today >= 12) {
            $e->error(7, 1, "Vous êtes trop âgé (" . $age_today . " ans) pour prendre cette licence.");
        }

        if (Form::get('LICENCE') == ListesForm::LIC_JUNIOR && $age_today >= 16) {
            $e->error(7, 1, "Vous êtes trop âgé (" . $age_today . " ans) pour prendre cette licence.");
        }

        if (Form::get('LICENCE') == ListesForm::LIC_JUNIOR && $age_today < 12) {
            $e->error(7, 1, "Vous êtes trop jeune (" . $age_today . " ans) pour prendre cette licence.");
        }

        if (Form::get('LICENCE') == ListesForm::LIC_ADULTE && $age_today < 16) {
            $e->error(7, 1, "Vous êtes trop jeune (" . $age_today . " ans) pour prendre cette licence.");
        }
    }

    /**
     * Affichage des champs de saisie assurance AXA
     * @param Error $e
     * @uses cActivite
     */
    private static function affAss(Error $e)
    {
        ?>
        <div class="col-xs-12">
            <h3>8 - Assurance personelle complémentaire facultative</h3>
            <p>La FFESSM a négocie avec le groupe AXA une assurance complémentaire. Voir les tableaux d'affichage.
                Cette assurance est facultative pour la plongée mais nécessaire pour la compétition de nage avec palmes.
                Pour vous aider à choisir votre assurance, vous pouvez consulter les garanties dans le tableau
                <a href="<?php echo Config::P_LAXA; ?>" target="_blank"><strong><u>suivant</u></strong></a>.
                <?php $e->afficheErrors(8, 1); ?></p>
        </div>

        <?php
        $n = 3;
        $idx = 0;
        $v = count(ListesForm::$axa);
        $nbcols = (int)($v / $n);
        $mod =  ($v % $n != 0) ? 1 : 0;
        $nbcols += $mod;
        $cols = 12 / $nbcols;
        $foot = 0;
        foreach (ListesForm::$axa as $k => $v) {

            if ($idx % 3 == 0) { ?>
                <div class="col-xs-12 col-sm-<?= $cols ?>">
                <?php
            }
            Controls::inradio(
                    'ASSURANCE',
                    [$k . " : <strong>" . $v . "€</strong>" => $k],
                    'App\Inscription\ExecAffCheck::cActivite',
                    self::$oc
            );
            $mod = $idx % 3;
            if ($mod == 2) { ?>
                </div>
                <?php
            }
            $idx++;
        }
        if ($mod <= $n-1) { ?>
            </div>
            <?php
        }
    }

    /**
     * Vérification des champs de saisie AXA
     * @param Error $e
     */
    private static function checkAss(Error $e)
    {
        $assurance = Form::get('ASSURANCE');

        if ($assurance == "") {
            $e->error(8, 1, "Vous n'avez pas précisé l'assurance personnelle que vous souhaitez.");
        }

        if ($assurance != ListesForm::A_NONE && Form::get('LICENCE') == ListesForm::LIC_AUTRE_CLUB) {
            $e->error(8, 1, "Pour prendre une assurance, contactez le club qui vous a délivré votre licence.");
        }

        $k = new Calculate();
        $axa = $k->calcAxa($assurance);
        if ($axa < 0) {
            $e->error(8, 1, "Erreur de calcul assurance.");
        }
    }

    /**
     * Affichage des champs de saisie du champ "réduction famille"
     * @param Error $e
     */
    private static function affReducfam(Error $e)
    {
        ?>
        <div class="col-xs-12">
            <h3>9 -Réductions</h3>
        </div>
        <div class="col-xs-12">
            <h4>Réduction famille</h4>
            <p>A partir du deuxième inscrit d'une famille, il est possible d'avoir une réduction. Cette réduction
                n'est pas cumulable avec les cotisations bénévoles, encadrants ou apnéistes non-plongeurs.</p>
        </div>
        <style>
            .big {
                font-size: larger;
            }
        </style>
        <?php

        // Verif du champ REDUCFAMID

        if (($valReducFam = Form::get('REDUCFAMID')) == '') {
            // Génération d'un ID et sauvegarde

            $valReducFam = AdhCoding::getRandomValID();

            Form::set('REDUCFAMID', $valReducFam);
        }
        ?>
        <div class="col-xs-12 col-sm-6">
            <p>Si vous payez plein tarif, vous pouvez utiliser l'identifiant ci-dessous pour obtenir une réduction
                famille lors de l'inscription d'autres membres de votre famille</p>
            <p>Cet identifiant est également indiqué sur la fiche PDF délivrée a la fin de la preinscription
                dans la rubrique "récapitulatif des documents à fournir</p>
            <p>Identifiant réduction famille <span class="label label-primary big"><?= $valReducFam ?></span></p>
            <input type="hidden" name="REDUCFAMID" value="<?= $valReducFam ?>">
        </div>
        <div class="col-xs-12 col-sm-6">

            <p>Vous pouvez également renseigner dans le champ ci-dessous un indentifiant réduction famille
                d'un membre de la famille ayant réalisé une inscription plein tarif.</p>
            <?php $e->afficheErrors(9, 1); ?>
            <div class="col-xs-8">
                <?php Controls::intext(
                        '' ,
                        'REDUCFAM',
                        Form::get('REDUCFAM'),
                        "Indiquez l'identifiant de l'adhérent plein tarif"
                        //,'onchange="adaptprix()"'
                    );
                ?>
            </div>
            <div class="col-xs-4">
                <button id="id_btn_reducfam" class="btn btn-primary" >Valider cet ID</button>
            </div>
            <script>
                $('#id_btn_reducfam').click(function (event) {
                    event.preventDefault();
                    adaptprix()
                })
            </script>
            <div class="col-xs-12">
                <span id="pmain_rfam" ></span>
            </div>
        </div>

        <?php // Les éléments Carte GUC et Carte SIUAPS sont forcés, mais la mécanique de calcul reste en place
        ?>
        <input type="hidden" name="CARTEGUC" value="OUI">
        <input type="hidden" name="CARTESIUAPS" value="OUI">
        <?php
    }

    /**
     * Vérification du champ "réduction famille"
     * @param Error $e
     */
    private static function checkReducfam(Error $e)
    {
        $reducFam = Form::get('REDUCFAM');

        if ($reducFam != '') {
            if (Form::get('BENEVOLE') == 'OUI' ||
                Form::get('ACTIVITE') == ListesForm::A_ENCADREMENT ||
                Form::get('COTISATION') == ListesForm::COT_APNEE) {
                $e->error(9, 1, "La réduction famille n'est pas compatible avec votre cotisation.");
            }

            $calc = new Calculate();
            $res = $calc->calcReducFam($reducFam, Form::get('REDUCFAMID'));

            if (($res['fErr'] != Calculate::OK) &&
                ($res['fErr'] != Calculate::ID_VIDE)) {
                $e->error(9,1,"Erreur sur l'identifiant de réduction famille, vérifiez votre saisie");
            }
        }
    }

    /**
     * Affichage du champ de saisie "facture demandée"
     * @param Error $e
     */
    private static function affFact(Error $e)
    {
        // TODO dissocier facture de CAESUG
        ?>
        <div class="col-xs-12">
            <h3>10 - Chèques de caution, prise en charge CAESUG et facture</h3>
        </div>
        <div class="col-xs-12 col-sm-6">
            <h4>Facture et prise en charge CAESUG</h4>
            <?php $e->afficheErrors(10, 1);

            $vals = array(
                "-" => '',
                "Aucune facture" => "NON",
                "Prise en charge CAESUG" => "CAESUG",
                "Facture à votre nom" => "OUI"
            );
            Controls::inoption(
                'FACTURE',
                $vals,
                Form::get('FACTURE'),
                self::$oc
            ); ?>
        </div>
        <?php
    }

    /**
     * Affichage du champ de saisie "prêt de matériel"
     * @param Error $e
     */
    private static function affPret(Error $e)
    {
        ?>
        <div class="col-xs-12">
            <h4>Prêt de matériel</h4>
            <?php $e->afficheErrors(10, 2); ?>
            <p>Si vous désirez emprunter du matériel au club (détendeur, gilet, bouteille, …), un chèque de caution
                d'un montant de <?= Config::CAUTION_MATOS; ?>€ vous sera demandé et sera conservé par le
                club toute l’année.</p>
            <p class="yellow">Si vous vous inscrivez en passage de niveau, vous devrez participer à des week-end
                techniques à Niolon pour conforter et valider vos acquis. Si vous n'avez pas tout votre matériel,
                en cochant 'oui' ci-dessous, vous pourrez emprunter gratuitement stab et détendeur pour ces W.E.</p>
            <p>Ce chèque peut vous être restitué au mois de juin si vous le demandez, sinon il sera conservé jusqu'au
                mois de Novembre, détruit ensuite, pour vous permettre d'emprunter du matériel jusqu'à la prochaine
                inscription au club.</p>
            <p><strong>Si vous ne faites pas de chèque, vous n'aurez pas accès au prêt matériel.</strong></p>

            <p>Souhaitez-vous emprunter du matériel ?</p>

            <?php
            $vals = array("-" => '', "Oui" => "OUI", "Non" => "NON");
            Controls::inoption(
                'PRETMAT',
                $vals,
                Form::get('PRETMAT'),
                self::$oc
            ); ?>
        </div>
        <?php
    }

    /**
     * Vérification du champ "prêt de matériel"
     * @param Error $e
     */
    private static function checkPret(Error $e)
    {
        if (Form::get('PRETMAT') == "") {
            $e->error(10, 2, "Vous n'avez pas précisé si vous voulez emprunter du matériel.");
        }

        if (Form::get('PRETMAT') == "OUI" &&
            (Form::get('ACTIVITE') == ListesForm::A_APNEEDEB ||
             Form::get('ACTIVITE') == ListesForm::A_APNEECONF) &&
            !Form::get('APNEESCA')) {
            $e->error(10, 2, "Vous ne pouvez pas emprunter de matériel avec la cotisation GUC choisie.");
        }
    }

    /**
     * Affichag d'informations sur le badge piscine
     */
    private static function affBadge(/*Error $e*/)
    {
        ?>
        <div class="col-xs-12">
            <h4>Badge magnétique pour l'accès à la piscine</h4>
            <p>Afin de pouvoir accéder à la piscine du campus, un badge magnétique vous est prêté pour toute l’année.
                En échange, un chèque de caution de <?= Config::BADGE_PISCINE; ?> € établi à l'ordre du GUC Plongée
                vous est demandé. <strong>Si vous perdez le badge ou si vous ne le rendez pas fin
                    juin <?= Config::$p_annee + 1; ?>,
                    le chèque sera encaissé.</strong></p>
        </div>
        <?php
    }

    /**
     * Affichage Déclaration CNIL
     */
    private static function affInfoperso(Error $e)
    {
        ?>
        <div class="col-xs-12">
            <h3>11 - Informations administratives</h3>
            <?php $e->afficheErrors(11, 1); ?>
            <h4>Informations légales.</h4>
            <p>Les informations recueillies sont nécessaires pour votre adhésion. Elles font l’objet d’un traitement
                informatique et sont destinées au secrétariat. En application de l’article 34 de la Loi du 6 janvier
                1978,
                vous bénéficiez d’un droit d’accès et de rectification aux informations qui vous concernent.
                Si vous souhaitez exercer ce droit et obtenir communication des informations vous concernant,
                veuillez vous adresser au secrétariat de l’association.</p>
        </div>
        <?php
    }

    /**
     * Affichage du champ de saisie d'autorisation d'utilisation de l'adresse mail
     * @param Error $e
     */
    private static function affMailliste(Error $e)
    {
        ?>
        <div class="col-xs-12">
            <h4>Utilisation de votre mail</h4>
            <p>Souhaitez-vous communiquer votre email au GUC Central afin de recevoir des informations complémentaires
                ?</p>
            <?php $e->afficheErrors(11, 1);

            $vals = array(
                "Oui" => "OUI",
                "Non" => "NON"
            );
            Controls::inoption(
                'MAILGUC',
                $vals,
                Form::get('MAILGUC'),
                self::$oc
            ); ?>
        </div>
        <?php
    }

    /**
     * Vérification du champ de saisie d'autorisation d'utilisation de l'adresse mail
     * @param Error $e
     */
    private static function checkMailliste(Error $e)
    {
        if (Form::get('MAILGUC') == "") {
            $e->error(11, 1, "Vous n'avez pas précisé si vous voulez communiquer votre email au GUC Central.");
        }
    }

    /**
     * Afichage du champ de saisie règlement accepté
     * @param Error $e
     */
    private static function affReglement(Error $e)
    {
        ?>
        <div class="col-xs-12">
            <h4>Réglement intérieur et politique de protection des données personelles.</h4>
            <?php $e->afficheErrors(11, 2); ?>
            <p>Je reconnais avoir pris connaissance
                <a href="../docs/ReglementInterieur.pdf" target="_blank">du réglement intérieur</a> ainsi que
            de <a href="../docs/RGPD.pdf" target="_blank">la politique de protection des Données personelles</a>.</p>
            <p>Je peux également en avoir une copie auprès du secrétariat du club.</p>
            <?php Controls::incheckbox(
                "<mark>Je signe en cochant cette case.</mark>",
                'REGLEMENT',
                Form::get('REGLEMENT') == 'OUI'
            ); ?>
        </div>
        <?php
    }

    /**
     * Vérification du champ de saisie règlement accepté
     * @param Error $e
     */
    private static function checkReglement(Error $e)
    {
        if (Form::get('REGLEMENT') != "OUI") {
            $e->error(11, 2, "Vous n'avez pas accepté le règlement intérieur.");
        }
    }

    /**
     * Affchage du champ autorisation parentale
     * @param Error $e
     * @uses cActivite
     */
    private static function affMineur(Error $e)
    {
        ?>
        <div class="col-xs-12">
            <h3>12 - Mineurs</h3>
            <h4>Autorisation parentale pour les mineurs uniquement</h4>
            <?php $e->afficheErrors(12, 1); ?>
            <p>Je soussigné(e)</p>
        </div>

        <div class="col-xs-12 col-sm-6">
            <?php Controls::intext(
                "Nom : ",
                'MINNOM',
                Form::get('MINNOM'),
                "Le nom de la personne responsable"
            ); ?>
        </div>

        <div class="col-xs-12 col-sm-6">
            <?php Controls::intext(
                "Prénom : ",
                'MINPRENOM',
                Form::get('MINPRENOM'),
                "Le prénom de la personne responsable"
            ); ?>
        </div>

        <div class="col-xs-12">
            <p>agissant en qualité de</p>

            <?php $v1 = array("Père" => "Père",
                "Mère" => "Mère",
                "Tuteur légal" => "Tuteur");
            Controls::radio(
                'MINQUAL',
                $v1,
                'App\Inscription\ExecAffCheck::cActivite'
            ); ?>

            <p>autorise le mineur sus-nommé à pratiquer la plongée sous-marine dans le cadre des activités
                organisées par le club.</p>

            <?php Controls::incheckbox(
                "<mark>Je signe en cochant cette case.</mark>",
                'MINSIGN',
                Form::get('MINSIGN') == 'OUI'
            ); ?>

        </div>
        <?php
    }

    /**
     * Vérification du champ de saisie autorisation parentale
     * @param Error $e
     */
    private static function checkMineur(Error $e)
    {
        $age_today = GucDate::age(Form::get('DATENAISS'));

        if ($age_today < 18) {
            if (Form::get('MINNOM') == "") {
                $e->error(12, 1, "Vous êtes mineur et le nom du représentant légal n'est pas renseigné.");
            }

            if (Form::get('MINPRENOM') == "") {
                $e->error(12, 1, "Vous êtes mineur et le prénom du représentant légal n'est pas renseigné.");
            }

            if (Form::get('MINQUAL') == "") {
                $e->error(12, 1, "Vous êtes mineur et la qualité du représentant légal n'est pas renseignée.");
            }

            if (Form::get('MINSIGN') != "OUI") {
                $e->error(12, 1, "Vous êtes mineur et le document n'est pas signé par le représentant légal .");
            }
        }

        // Inhibition des valeurs saisies dans la section autorisation parentale
        // Si l(adhérent est majeur

        if ($age_today >= 18) {
            Form::set('MINNOM', "");
            Form::set('MINPRENOM', "");
            Form::set('MINQUAL', "");
        }
    }

    /**
     * Affichage de la zone résultat de calcul et d'informations
     * @param Error $e
     */
    private static function affCalcul(Error $e)
    {
        ?>
        <div class="col-xs-12">
            <h3>13 - Cotisations</h3>
            <p>La cotisation club vous permet l'accès aux activités organisées par le club : piscine, brevets,
                sorties, nage, prêts (selon les conditions définies dans le Règlement Intérieur).
                Cette cotisation inclut l'adhésion au club, l'adhésion au GUC central et l'accès à la piscine
                (et à toutes les installations du SIUAPS).</p>
        </div>
        <div class="col-xs-12 col-sm-7">
            <span id="pmain_detail" ></span>
            <?php $e->afficheErrors(13, 1); ?>
        </div>
        <div class="col-xs-12 col-sm-5">
            <span id="pmain_total" ></span>
        </div>
        <div class="clearfix"></div>
        <?php
    }

    /**
     * Affichage du bouton "submit"
     */
    private static function affConfirm(/*Error $e*/)
    {
        ?>
        <div class="col-xs-12">
            <h3>14 - Validation et envoi de la pré-inscription</h3>
            <p>Avant d'appuyer sur le bouton "Valider" ci-dessous, prenez le temps de bien vérifier bien que toutes
                les données saisies dans le formulaire sont exactes.</p>

            <button id="idSubmit" type="submit" class="btn btn-default btn-block" name="mySubmit" value="Valider ma pré-inscription">
                <span class="glyphicon glyphicon-ok"></span> Valider ma préinscription
            </button>
        </div>
        <?php
    }

    /**
     * Fonction d'execution des routine d'affichage des champs et informations
     * en fonction du type de licence
     * @param int $typeLicence
     * @param Error $e
     * @return array
     */
    public static function execAff(int $typeLicence, Error $e): array
    {
        $affLater = [];

        foreach (self::$fields as $v) {
            if ($v[$typeLicence] == true) {
                $func = $v['aff'];
                if ($func != null) {
                    $func = 'App\\Inscription\\ExecAffCheck::'.$func;
                    $ret = $func($e);
                    if ($ret != '') {
                        // Des choses a afficher en footer
                        $affLater[] = $ret;
                    }
                }
            }
        }
        return $affLater;
    }

    /**
     * Fonction d'execution des routine de vérification des champs et informations
     * en fonction du type de licence
     * @param int $typeLicence
     * @param Error $e
     */
    public static function execCheck(int $typeLicence, Error $e): void
    {
        /** @var Error $e */
        foreach (self::$fields as $v) {
            if ($v[$typeLicence] == true) {
                $func = $v['check'];
                if ($func != null) {
                    $func = 'App\\Inscription\\ExecAffCheck::'.$func;
                    $func($e);
                }
            }
        }
    }
}
